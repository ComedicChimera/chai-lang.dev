import sum, cartesian, .enumerate from sequtil
import print from io.std
import system, OS from os
import sleep_millis from time

const BOARD_SIZE: usize = 20

let board: Mat[bool, BOARD_SIZE, BOARD_SIZE]

let kernel = cartesian([-1, 0, 1]) 

def next_board() Mat[bool, BOARD_SIZE, BOARD_SIZE] =
	# no cast necessary -- sequences are type classes
	for y, row in board.enumerate()
		for x, cell in row.enumerate()
			let num_alive = sum(
				for x_off, y_off in kernel
					let x_pos = x + x_off, 
						y_pos = y + y_off

					(x_off != y_off != 0 
					&& 0 <= x_pos <= BOARD_SIZE 
					&& 0 <= y_pos <= BOARD_SIZE as i8)
				end
			)

			match num_alive
				case 2 => cell
				case 3 => true
				case _ => false
			end
		end
	end

def main()
	board[3][3] = true
	board[3][4] = true
	board[4][3] = true

	while true
		board = next_board()

		system(
			if OS == "windows" => "cls" 
			else => "clear" end
		)

		for row in board
			for cell in row
				print(if cell => '*' else => ' ' end)
			end

			print('\n')
		end

		sleep_millis(200)
	end
end
